// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'features/weather_info/domain/entities/weather_local_info_response_entity/clouds_local_entity.dart';
import 'features/weather_info/domain/entities/weather_local_info_response_entity/coordinate_local_entity.dart';
import 'features/weather_info/domain/entities/weather_local_info_response_entity/main_weather_info_local_entity.dart';
import 'features/weather_info/domain/entities/weather_local_info_response_entity/sunset_sunrise_local_entity.dart';
import 'features/weather_info/domain/entities/weather_local_info_response_entity/weather_description_local_entity.dart';
import 'features/weather_info/domain/entities/weather_local_info_response_entity/weather_local_info_entity.dart';
import 'features/weather_info/domain/entities/weather_local_info_response_entity/weather_theme_local_entity.dart';
import 'features/weather_info/domain/entities/weather_local_info_response_entity/wind_info_local_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 8004567521089826049),
      name: 'CloudsLocalEntity',
      lastPropertyId: const obx_int.IdUid(2, 2878631460594235924),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8327212382953297935),
            name: 'all',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2878631460594235924),
            name: 'id',
            type: 6,
            flags: 1)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 9157868335652519605),
      name: 'CoordinateLocalEntity',
      lastPropertyId: const obx_int.IdUid(3, 7707103990352106245),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4787181754168956578),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3509606493041324572),
            name: 'lon',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7707103990352106245),
            name: 'lat',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 609413950964179348),
      name: 'MainWeatherInfoLocalEntity',
      lastPropertyId: const obx_int.IdUid(7, 8284560680711469210),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 9120565257053581853),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6305862247292274430),
            name: 'temp',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6273289895038275607),
            name: 'feelsLike',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6499471526456248709),
            name: 'tempMin',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5695395390179098074),
            name: 'tempMax',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4493402748823689414),
            name: 'pressure',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8284560680711469210),
            name: 'humidity',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 3379533893714014292),
      name: 'SunsetSunriseLocalEntity',
      lastPropertyId: const obx_int.IdUid(5, 6406697144820805951),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4408082276568054199),
            name: 'type',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7869473689276522507),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2985923439088574203),
            name: 'country',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8247961052163359708),
            name: 'sunrise',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6406697144820805951),
            name: 'sunset',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 97672498213097431),
      name: 'WeatherDescriptionLocalEntity',
      lastPropertyId: const obx_int.IdUid(4, 728632880378117349),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8161580021481325363),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4860545692871984127),
            name: 'main',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1420463495619633763),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 728632880378117349),
            name: 'icon',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 1991729669869995692),
      name: 'WeatherInfoLocalEntity',
      lastPropertyId: const obx_int.IdUid(10, 1119357156158341494),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5802510938072182917),
            name: 'mainId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 6925336700872949768),
            relationTarget: 'MainWeatherInfoLocalEntity'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6205292498627840347),
            name: 'visibility',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3859232304962005617),
            name: 'windId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 2249325898657291831),
            relationTarget: 'WindInfoLocalEntity'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3532406966244479476),
            name: 'cloudsId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(3, 7753373733565515805),
            relationTarget: 'CloudsLocalEntity'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5202411053180537932),
            name: 'dt',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 9201454610927208640),
            name: 'sysId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(4, 6826665825906451462),
            relationTarget: 'SunsetSunriseLocalEntity'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2211395702628235294),
            name: 'timezone',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 5391052047764531067),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 4069866618685987695),
            name: 'name',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(5, 489663382546893441)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 1119357156158341494),
            name: 'weatherThemeId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(6, 3225589735861249319),
            relationTarget: 'WeatherThemeLocalEntity')
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(1, 3185555671160819525),
            name: 'weather',
            targetId: const obx_int.IdUid(5, 97672498213097431))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 8959671873836759611),
      name: 'WeatherThemeLocalEntity',
      lastPropertyId: const obx_int.IdUid(3, 1236379297898262903),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8623976329644945147),
            name: 'firstColorHex',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 697764192466574575),
            name: 'secondColorHex',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1236379297898262903),
            name: 'id',
            type: 6,
            flags: 1)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(8, 6730552940449885244),
      name: 'WindInfoLocalEntity',
      lastPropertyId: const obx_int.IdUid(3, 3562823834078160839),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1881430449152637408),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8739083617778099108),
            name: 'speed',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3562823834078160839),
            name: 'deg',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(8, 6730552940449885244),
      lastIndexId: const obx_int.IdUid(6, 3225589735861249319),
      lastRelationId: const obx_int.IdUid(1, 3185555671160819525),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    CloudsLocalEntity: obx_int.EntityDefinition<CloudsLocalEntity>(
        model: _entities[0],
        toOneRelations: (CloudsLocalEntity object) => [],
        toManyRelations: (CloudsLocalEntity object) => {},
        getId: (CloudsLocalEntity object) => object.id,
        setId: (CloudsLocalEntity object, int id) {
          object.id = id;
        },
        objectToFB: (CloudsLocalEntity object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.all);
          fbb.addInt64(1, object.id ?? 0);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final allParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final object = CloudsLocalEntity(all: allParam, id: idParam);

          return object;
        }),
    CoordinateLocalEntity: obx_int.EntityDefinition<CoordinateLocalEntity>(
        model: _entities[1],
        toOneRelations: (CoordinateLocalEntity object) => [],
        toManyRelations: (CoordinateLocalEntity object) => {},
        getId: (CoordinateLocalEntity object) => object.id,
        setId: (CoordinateLocalEntity object, int id) {
          object.id = id;
        },
        objectToFB: (CoordinateLocalEntity object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addFloat64(1, object.lon);
          fbb.addFloat64(2, object.lat);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final lonParam =
              const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final latParam =
              const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final object =
              CoordinateLocalEntity(lon: lonParam, lat: latParam, id: idParam);

          return object;
        }),
    MainWeatherInfoLocalEntity: obx_int.EntityDefinition<
            MainWeatherInfoLocalEntity>(
        model: _entities[2],
        toOneRelations: (MainWeatherInfoLocalEntity object) => [],
        toManyRelations: (MainWeatherInfoLocalEntity object) => {},
        getId: (MainWeatherInfoLocalEntity object) => object.id,
        setId: (MainWeatherInfoLocalEntity object, int id) {
          object.id = id;
        },
        objectToFB: (MainWeatherInfoLocalEntity object, fb.Builder fbb) {
          final tempOffset =
              object.temp == null ? null : fbb.writeString(object.temp!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, tempOffset);
          fbb.addFloat64(2, object.feelsLike);
          fbb.addFloat64(3, object.tempMin);
          fbb.addFloat64(4, object.tempMax);
          fbb.addInt64(5, object.pressure);
          fbb.addInt64(6, object.humidity);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final tempParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final feelsLikeParam =
              const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final tempMinParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 10);
          final tempMaxParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 12);
          final pressureParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final humidityParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final object = MainWeatherInfoLocalEntity(
              temp: tempParam,
              feelsLike: feelsLikeParam,
              tempMin: tempMinParam,
              tempMax: tempMaxParam,
              pressure: pressureParam,
              humidity: humidityParam,
              id: idParam);

          return object;
        }),
    SunsetSunriseLocalEntity: obx_int.EntityDefinition<
            SunsetSunriseLocalEntity>(
        model: _entities[3],
        toOneRelations: (SunsetSunriseLocalEntity object) => [],
        toManyRelations: (SunsetSunriseLocalEntity object) => {},
        getId: (SunsetSunriseLocalEntity object) => object.id,
        setId: (SunsetSunriseLocalEntity object, int id) {
          object.id = id;
        },
        objectToFB: (SunsetSunriseLocalEntity object, fb.Builder fbb) {
          final countryOffset =
              object.country == null ? null : fbb.writeString(object.country!);
          final sunriseOffset =
              object.sunrise == null ? null : fbb.writeString(object.sunrise!);
          final sunsetOffset =
              object.sunset == null ? null : fbb.writeString(object.sunset!);
          fbb.startTable(6);
          fbb.addInt64(0, object.type);
          fbb.addInt64(1, object.id ?? 0);
          fbb.addOffset(2, countryOffset);
          fbb.addOffset(3, sunriseOffset);
          fbb.addOffset(4, sunsetOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final typeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final countryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final sunriseParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final sunsetParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final object = SunsetSunriseLocalEntity(
              type: typeParam,
              id: idParam,
              country: countryParam,
              sunrise: sunriseParam,
              sunset: sunsetParam);

          return object;
        }),
    WeatherDescriptionLocalEntity:
        obx_int.EntityDefinition<WeatherDescriptionLocalEntity>(
            model: _entities[4],
            toOneRelations: (WeatherDescriptionLocalEntity object) => [],
            toManyRelations: (WeatherDescriptionLocalEntity object) => {},
            getId: (WeatherDescriptionLocalEntity object) => object.id,
            setId: (WeatherDescriptionLocalEntity object, int id) {
              object.id = id;
            },
            objectToFB: (WeatherDescriptionLocalEntity object, fb.Builder fbb) {
              final mainOffset =
                  object.main == null ? null : fbb.writeString(object.main!);
              final descriptionOffset = object.description == null
                  ? null
                  : fbb.writeString(object.description!);
              final iconOffset =
                  object.icon == null ? null : fbb.writeString(object.icon!);
              fbb.startTable(5);
              fbb.addInt64(0, object.id ?? 0);
              fbb.addOffset(1, mainOffset);
              fbb.addOffset(2, descriptionOffset);
              fbb.addOffset(3, iconOffset);
              fbb.finish(fbb.endTable());
              return object.id ?? 0;
            },
            objectFromFB: (obx.Store store, ByteData fbData) {
              final buffer = fb.BufferContext(fbData);
              final rootOffset = buffer.derefObject(0);
              final idParam = const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 4);
              final mainParam = const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6);
              final descriptionParam =
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGetNullable(buffer, rootOffset, 8);
              final iconParam = const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
              final object = WeatherDescriptionLocalEntity(
                  id: idParam,
                  main: mainParam,
                  description: descriptionParam,
                  icon: iconParam);

              return object;
            }),
    WeatherInfoLocalEntity: obx_int.EntityDefinition<WeatherInfoLocalEntity>(
        model: _entities[5],
        toOneRelations: (WeatherInfoLocalEntity object) => [
              object.main,
              object.wind,
              object.clouds,
              object.sys,
              object.weatherTheme
            ],
        toManyRelations: (WeatherInfoLocalEntity object) => {
              obx_int.RelInfo<WeatherInfoLocalEntity>.toMany(1, object.id!):
                  object.weather
            },
        getId: (WeatherInfoLocalEntity object) => object.id,
        setId: (WeatherInfoLocalEntity object, int id) {
          object.id = id;
        },
        objectToFB: (WeatherInfoLocalEntity object, fb.Builder fbb) {
          final visibilityOffset = object.visibility == null
              ? null
              : fbb.writeString(object.visibility!);
          final dtOffset =
              object.dt == null ? null : fbb.writeString(object.dt!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          fbb.startTable(11);
          fbb.addInt64(0, object.main.targetId);
          fbb.addOffset(1, visibilityOffset);
          fbb.addInt64(2, object.wind.targetId);
          fbb.addInt64(3, object.clouds.targetId);
          fbb.addOffset(4, dtOffset);
          fbb.addInt64(5, object.sys.targetId);
          fbb.addInt64(6, object.timezone);
          fbb.addInt64(7, object.id ?? 0);
          fbb.addOffset(8, nameOffset);
          fbb.addInt64(9, object.weatherTheme.targetId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final visibilityParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final dtParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final timezoneParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final object = WeatherInfoLocalEntity(
              visibility: visibilityParam,
              dt: dtParam,
              timezone: timezoneParam,
              id: idParam,
              name: nameParam);
          object.main.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.main.attach(store);
          object.wind.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.wind.attach(store);
          object.clouds.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.clouds.attach(store);
          object.sys.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.sys.attach(store);
          object.weatherTheme.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.weatherTheme.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<WeatherInfoLocalEntity>(
              object.weather,
              store,
              obx_int.RelInfo<WeatherInfoLocalEntity>.toMany(1, object.id!));
          return object;
        }),
    WeatherThemeLocalEntity: obx_int.EntityDefinition<WeatherThemeLocalEntity>(
        model: _entities[6],
        toOneRelations: (WeatherThemeLocalEntity object) => [],
        toManyRelations: (WeatherThemeLocalEntity object) => {},
        getId: (WeatherThemeLocalEntity object) => object.id,
        setId: (WeatherThemeLocalEntity object, int id) {
          object.id = id;
        },
        objectToFB: (WeatherThemeLocalEntity object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.firstColorHex);
          fbb.addInt64(1, object.secondColorHex);
          fbb.addInt64(2, object.id ?? 0);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final firstColorHexParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final secondColorHexParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final object = WeatherThemeLocalEntity(
              firstColorHex: firstColorHexParam,
              secondColorHex: secondColorHexParam,
              id: idParam);

          return object;
        }),
    WindInfoLocalEntity: obx_int.EntityDefinition<WindInfoLocalEntity>(
        model: _entities[7],
        toOneRelations: (WindInfoLocalEntity object) => [],
        toManyRelations: (WindInfoLocalEntity object) => {},
        getId: (WindInfoLocalEntity object) => object.id,
        setId: (WindInfoLocalEntity object, int id) {
          object.id = id;
        },
        objectToFB: (WindInfoLocalEntity object, fb.Builder fbb) {
          final speedOffset =
              object.speed == null ? null : fbb.writeString(object.speed!);
          fbb.startTable(4);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, speedOffset);
          fbb.addInt64(2, object.deg);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final speedParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final degParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final object = WindInfoLocalEntity(
              speed: speedParam, deg: degParam, id: idParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [CloudsLocalEntity] entity fields to define ObjectBox queries.
class CloudsLocalEntity_ {
  /// see [CloudsLocalEntity.all]
  static final all =
      obx.QueryIntegerProperty<CloudsLocalEntity>(_entities[0].properties[0]);

  /// see [CloudsLocalEntity.id]
  static final id =
      obx.QueryIntegerProperty<CloudsLocalEntity>(_entities[0].properties[1]);
}

/// [CoordinateLocalEntity] entity fields to define ObjectBox queries.
class CoordinateLocalEntity_ {
  /// see [CoordinateLocalEntity.id]
  static final id = obx.QueryIntegerProperty<CoordinateLocalEntity>(
      _entities[1].properties[0]);

  /// see [CoordinateLocalEntity.lon]
  static final lon = obx.QueryDoubleProperty<CoordinateLocalEntity>(
      _entities[1].properties[1]);

  /// see [CoordinateLocalEntity.lat]
  static final lat = obx.QueryDoubleProperty<CoordinateLocalEntity>(
      _entities[1].properties[2]);
}

/// [MainWeatherInfoLocalEntity] entity fields to define ObjectBox queries.
class MainWeatherInfoLocalEntity_ {
  /// see [MainWeatherInfoLocalEntity.id]
  static final id = obx.QueryIntegerProperty<MainWeatherInfoLocalEntity>(
      _entities[2].properties[0]);

  /// see [MainWeatherInfoLocalEntity.temp]
  static final temp = obx.QueryStringProperty<MainWeatherInfoLocalEntity>(
      _entities[2].properties[1]);

  /// see [MainWeatherInfoLocalEntity.feelsLike]
  static final feelsLike = obx.QueryDoubleProperty<MainWeatherInfoLocalEntity>(
      _entities[2].properties[2]);

  /// see [MainWeatherInfoLocalEntity.tempMin]
  static final tempMin = obx.QueryDoubleProperty<MainWeatherInfoLocalEntity>(
      _entities[2].properties[3]);

  /// see [MainWeatherInfoLocalEntity.tempMax]
  static final tempMax = obx.QueryDoubleProperty<MainWeatherInfoLocalEntity>(
      _entities[2].properties[4]);

  /// see [MainWeatherInfoLocalEntity.pressure]
  static final pressure = obx.QueryIntegerProperty<MainWeatherInfoLocalEntity>(
      _entities[2].properties[5]);

  /// see [MainWeatherInfoLocalEntity.humidity]
  static final humidity = obx.QueryIntegerProperty<MainWeatherInfoLocalEntity>(
      _entities[2].properties[6]);
}

/// [SunsetSunriseLocalEntity] entity fields to define ObjectBox queries.
class SunsetSunriseLocalEntity_ {
  /// see [SunsetSunriseLocalEntity.type]
  static final type = obx.QueryIntegerProperty<SunsetSunriseLocalEntity>(
      _entities[3].properties[0]);

  /// see [SunsetSunriseLocalEntity.id]
  static final id = obx.QueryIntegerProperty<SunsetSunriseLocalEntity>(
      _entities[3].properties[1]);

  /// see [SunsetSunriseLocalEntity.country]
  static final country = obx.QueryStringProperty<SunsetSunriseLocalEntity>(
      _entities[3].properties[2]);

  /// see [SunsetSunriseLocalEntity.sunrise]
  static final sunrise = obx.QueryStringProperty<SunsetSunriseLocalEntity>(
      _entities[3].properties[3]);

  /// see [SunsetSunriseLocalEntity.sunset]
  static final sunset = obx.QueryStringProperty<SunsetSunriseLocalEntity>(
      _entities[3].properties[4]);
}

/// [WeatherDescriptionLocalEntity] entity fields to define ObjectBox queries.
class WeatherDescriptionLocalEntity_ {
  /// see [WeatherDescriptionLocalEntity.id]
  static final id = obx.QueryIntegerProperty<WeatherDescriptionLocalEntity>(
      _entities[4].properties[0]);

  /// see [WeatherDescriptionLocalEntity.main]
  static final main = obx.QueryStringProperty<WeatherDescriptionLocalEntity>(
      _entities[4].properties[1]);

  /// see [WeatherDescriptionLocalEntity.description]
  static final description =
      obx.QueryStringProperty<WeatherDescriptionLocalEntity>(
          _entities[4].properties[2]);

  /// see [WeatherDescriptionLocalEntity.icon]
  static final icon = obx.QueryStringProperty<WeatherDescriptionLocalEntity>(
      _entities[4].properties[3]);
}

/// [WeatherInfoLocalEntity] entity fields to define ObjectBox queries.
class WeatherInfoLocalEntity_ {
  /// see [WeatherInfoLocalEntity.main]
  static final main = obx.QueryRelationToOne<WeatherInfoLocalEntity,
      MainWeatherInfoLocalEntity>(_entities[5].properties[0]);

  /// see [WeatherInfoLocalEntity.visibility]
  static final visibility = obx.QueryStringProperty<WeatherInfoLocalEntity>(
      _entities[5].properties[1]);

  /// see [WeatherInfoLocalEntity.wind]
  static final wind =
      obx.QueryRelationToOne<WeatherInfoLocalEntity, WindInfoLocalEntity>(
          _entities[5].properties[2]);

  /// see [WeatherInfoLocalEntity.clouds]
  static final clouds =
      obx.QueryRelationToOne<WeatherInfoLocalEntity, CloudsLocalEntity>(
          _entities[5].properties[3]);

  /// see [WeatherInfoLocalEntity.dt]
  static final dt = obx.QueryStringProperty<WeatherInfoLocalEntity>(
      _entities[5].properties[4]);

  /// see [WeatherInfoLocalEntity.sys]
  static final sys =
      obx.QueryRelationToOne<WeatherInfoLocalEntity, SunsetSunriseLocalEntity>(
          _entities[5].properties[5]);

  /// see [WeatherInfoLocalEntity.timezone]
  static final timezone = obx.QueryIntegerProperty<WeatherInfoLocalEntity>(
      _entities[5].properties[6]);

  /// see [WeatherInfoLocalEntity.id]
  static final id = obx.QueryIntegerProperty<WeatherInfoLocalEntity>(
      _entities[5].properties[7]);

  /// see [WeatherInfoLocalEntity.name]
  static final name = obx.QueryStringProperty<WeatherInfoLocalEntity>(
      _entities[5].properties[8]);

  /// see [WeatherInfoLocalEntity.weatherTheme]
  static final weatherTheme =
      obx.QueryRelationToOne<WeatherInfoLocalEntity, WeatherThemeLocalEntity>(
          _entities[5].properties[9]);

  /// see [WeatherInfoLocalEntity.weather]
  static final weather = obx.QueryRelationToMany<WeatherInfoLocalEntity,
      WeatherDescriptionLocalEntity>(_entities[5].relations[0]);
}

/// [WeatherThemeLocalEntity] entity fields to define ObjectBox queries.
class WeatherThemeLocalEntity_ {
  /// see [WeatherThemeLocalEntity.firstColorHex]
  static final firstColorHex =
      obx.QueryIntegerProperty<WeatherThemeLocalEntity>(
          _entities[6].properties[0]);

  /// see [WeatherThemeLocalEntity.secondColorHex]
  static final secondColorHex =
      obx.QueryIntegerProperty<WeatherThemeLocalEntity>(
          _entities[6].properties[1]);

  /// see [WeatherThemeLocalEntity.id]
  static final id = obx.QueryIntegerProperty<WeatherThemeLocalEntity>(
      _entities[6].properties[2]);
}

/// [WindInfoLocalEntity] entity fields to define ObjectBox queries.
class WindInfoLocalEntity_ {
  /// see [WindInfoLocalEntity.id]
  static final id =
      obx.QueryIntegerProperty<WindInfoLocalEntity>(_entities[7].properties[0]);

  /// see [WindInfoLocalEntity.speed]
  static final speed =
      obx.QueryStringProperty<WindInfoLocalEntity>(_entities[7].properties[1]);

  /// see [WindInfoLocalEntity.deg]
  static final deg =
      obx.QueryIntegerProperty<WindInfoLocalEntity>(_entities[7].properties[2]);
}
